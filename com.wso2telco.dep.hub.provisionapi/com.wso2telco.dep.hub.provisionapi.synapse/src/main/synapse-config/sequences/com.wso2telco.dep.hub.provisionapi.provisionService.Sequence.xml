<?xml version="1.0" encoding="UTF-8"?>
<sequence name="com.wso2telco.dep.hub.provisionapi.provisionService.Sequence" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <sequence key="com.wso2telco.dep.common.main.request.Sequence"/>
    <property description="msisdn" expression="$ctx:uri.var.msisdn" name="msisdn" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:msisdn)" name="msisdn" scope="default" type="STRING"/>
    <property description="MSISDN" expression="get-property('msisdn')" name="MSISDN" scope="default" type="STRING"/>
    <property description="mcc" expression="$ctx:query.param.mcc" name="mcc" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:mcc)" name="mcc" scope="default" type="STRING"/>
    <property description="mnc" expression="$ctx:query.param.mnc" name="mnc" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:mnc)" name="mnc" scope="default" type="STRING"/>
    <property expression="json-eval($.serviceProvisionRequest.serviceCode)" name="serviceCode" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:serviceCode)" group="1" name="serviceCode" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING"/>
    <property expression="json-eval($.serviceProvisionRequest.serviceName)" name="serviceName" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:serviceName)" group="1" name="serviceName" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING"/>
    <property expression="json-eval($.serviceProvisionRequest.clientCorrelator)" name="clientCorrelator" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:clientCorrelator)" group="1" name="clientCorrelator" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING"/>
    <property expression="json-eval($.serviceProvisionRequest.clientReferenceCode)" name="clientReferenceCode" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:clientReferenceCode)" group="1" name="clientReferenceCode" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING"/>
    <property expression="json-eval($.serviceProvisionRequest.onBehalfOf)" name="onBehalfOf" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:onBehalfOf)" group="1" name="onBehalfOf" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING"/>
    <property expression="json-eval($.serviceProvisionRequest.purchaseCategoryCode)" name="purchaseCategoryCode" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:purchaseCategoryCode)" group="1" name="purchaseCategoryCode" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING"/>
    <property expression="json-eval($.serviceProvisionRequest.callbackReference.notifyURL)" name="notifyURL" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:notifyURL)" group="1" name="notifyURL" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING"/>
    <property expression="json-eval($.serviceProvisionRequest.callbackReference.callbackData)" name="callbackData" scope="default" type="STRING"/>
    <property expression="fn:normalize-space($ctx:callbackData)" group="1" name="callbackData" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING"/>
    <!-- REQUEST PARAMETER VALIDATION -->
    <filter xpath="boolean($ctx:mcc)">
        <then>
            <filter xpath="not(boolean($ctx:mnc))">
                <then>
                    <property name="isMissingMandatoryParam" scope="default" type="STRING" value="true"/>
                    <property expression="fn:concat('mnc',',')" name="missingParameters" scope="default" type="STRING"/>
                </then>
                <else/>
            </filter>
        </then>
        <else/>
    </filter>
    <filter xpath="boolean($ctx:serviceName)">
        <then/>
        <else>
            <filter xpath="not(boolean($ctx:serviceCode))">
                <then>
                    <property expression="fn:concat('serviceCode',',')" name="missingParameters" scope="default" type="STRING"/>
                    <property name="isMissingMandatoryParam" scope="default" type="STRING" value="true"/>
                </then>
                <else/>
            </filter>
        </else>
    </filter>
    <filter xpath="boolean($ctx:serviceCode)">
        <then/>
        <else>
            <filter xpath="not(boolean($ctx:serviceName))">
                <then>
                    <property expression="fn:concat('serviceName',',')" name="missingParameters" scope="default" type="STRING"/>
                    <property name="isMissingMandatoryParam" scope="default" type="STRING" value="true"/>
                </then>
                <else/>
            </filter>
        </else>
    </filter>
    <filter xpath="boolean($ctx:clientReferenceCode) and boolean($ctx:notifyURL) and boolean($ctx:callbackData) and boolean($ctx:msisdn)">
        <then/>
        <else>
            <property name="isMissingMandatoryParam" scope="default" type="STRING" value="true"/>
            <filter xpath="not(boolean($ctx:clientReferenceCode))">
                <then>
                    <property expression="fn:concat($ctx:missingParameters, 'clientReferenceCode,')" name="missingParameters" scope="default" type="STRING"/>
                </then>
                <else/>
            </filter>
            <filter xpath="not(boolean($ctx:notifyURL))">
                <then>
                    <property expression="fn:concat($ctx:missingParameters, 'notifyURL,')" name="missingParameters" scope="default" type="STRING"/>
                </then>
                <else/>
            </filter>
            <filter xpath="not(boolean($ctx:callbackData))">
                <then>
                    <property expression="fn:concat($ctx:missingParameters, 'callbackData,')" name="missingParameters" scope="default" type="STRING"/>
                </then>
                <else/>
            </filter>
            <filter xpath="not(boolean($ctx:msisdn))">
                <then>
                    <property expression="fn:concat($ctx:missingParameters, 'msisdn,')" name="missingParameters" scope="default" type="STRING"/>
                </then>
                <else/>
            </filter>
        </else>
    </filter>
    <filter regex="true" source="get-property('isMissingMandatoryParam')">
        <then>
            <property expression="fn:substring($ctx:missingParameters, 0, fn:string-length($ctx:missingParameters))" name="missingParameters" scope="default" type="STRING"/>
            <property name="httpStatusCode" scope="default" type="STRING" value="400"/>
            <property name="exceptionType" scope="default" type="STRING" value="SERVICE_EXCEPTION"/>
            <property name="messageId" scope="default" type="STRING" value="SVC0002"/>
            <property name="errorText" scope="default" type="STRING" value="Invalid input value for message part %1"/>
            <property expression="fn:concat('Missing mandatory parameters: ', $ctx:missingParameters)" name="errorVariable" scope="default" type="STRING"/>
            <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
        </then>
        <else/>
    </filter>
    <call-template target="com.wso2telco.dep.common.msisdnValidator.Template">
        <with-param name="paramName" value="msisdn"/>
        <with-param name="paramValue" value="{$ctx:msisdn}"/>
    </call-template>
    <sequence key="com.wso2telco.dep.common.mccMncValidator.Sequence"/>
    <filter xpath="(boolean($ctx:purchaseCategoryCode))">
    	<then>
	    	<sequence key="com.wso2telco.dep.common.purchase.category.code.validate.Sequence"/>
	  		<filter regex="false" source="get-property('PURCHASE_CATEGORY_VALIDATED')">
	    		<then>
	      			<sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
	    		</then>
	    		<else/>
	  		</filter>
	  		<filter regex="true" source="get-property('INTERNAL_ERROR')">
	    		<then>
	      			<sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
	    		</then>
	    		<else/>
	  		</filter>  
    	</then>
    	<else/>
  	</filter>
    <call-template target="com.wso2telco.dep.common.clientCorrelator.generator.Template">
        <with-param name="clientCorrelator" value="{$ctx:clientCorrelator}"/>
    </call-template>
    <sequence key="com.wso2telco.dep.common.endpoint.retriever.Sequence"/>
    <sequence key="com.wso2telco.dep.common.select.token.Sequence"/>
    <filter xpath="boolean($ctx:serviceCode)">
        <then/>
        <else>
            <sequence key="com.wso2telco.dep.common.serviceCode.retriever.Sequence"/>
            <filter xpath="boolean($ctx:serviceCode)">
                <then/>
                <else>
                    <property name="httpStatusCode" scope="default" type="STRING" value="400"/>
                    <property name="exceptionType" scope="default" type="STRING" value="SERVICE_EXCEPTION"/>
                    <property name="messageId" scope="default" type="STRING" value="SVC0001"/>
                    <property name="errorVariable" scope="default" type="STRING" value="No valid service code available for the service name provided."/>
                    <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
                </else>
            </filter>
        </else>
    </filter>
    <property expression="get-property('registry', 'conf:/repository/wso2telco/configurations/mediationConfig.xml')" name="mediationConfig" scope="default" type="OM"/>
    <property expression="$ctx:mediationConfig//huburl" name="HUB_URL" scope="default" type="STRING"/>
    <property expression="get-property('registry', 'conf:/repository/wso2telco/configurations/notificationURL.xml')" name="notificationURLConfig" scope="default" type="OM"/>
    <property expression="$ctx:notificationURLConfig//provisioning/provisioningNotification" name="NOTIFICATION_URL" scope="default" type="STRING"/>
    <sequence key="com.wso2telco.dep.common.notification.url.modify.Sequence"/>
    <filter regex="true" source="get-property('INTERNAL_ERROR')">
    	<then>
        	<sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
        </then>
        <else/>
    </filter>
	<class name="org.wso2telco.dep.nashornmediator.NashornMediator">
		<property name="script" value="
			var payload = mc.getPayloadJSON();
		    payload.serviceProvisionRequest.serviceCode = mc.getProperty('serviceCode');
		    payload.serviceProvisionRequest.serviceName = null;
		    payload.serviceProvisionRequest.clientCorrelator = mc.getProperty('uniqueClientCorrelator');
		    payload.serviceProvisionRequest.callbackReference.notifyURL = mc.getProperty('generatedNotifyURL');
		    mc.setPayloadJSON(payload);
		"/>
	</class>
    <sequence key="com.wso2telco.dep.common.call.endpoint.Sequence"/>
	<class name="org.wso2telco.dep.nashornmediator.NashornMediator">
		<property name="script" value="
			var operatorEndpoint = mc.getProperty('OPERATOR_ENDPOINT');
			var hubURL = mc.getProperty('HUB_URL');
			var apiName = mc.getProperty('API_NAME');
			var apiVersion = mc.getProperty('VERSION');
			var payload = mc.getPayloadJSON();
			payload.serviceProvisionResponse.clientCorrelator = mc.getProperty('clientCorrelator');
			var gatewayResourceURL = payload.serviceProvisionResponse.callbackReference.resourceURL;
			var resourcePath = gatewayResourceURL.replace(operatorEndpoint, '');
			var hubResourceURL = hubURL.concat('/').concat(apiName).concat('/').concat(apiVersion).concat(resourcePath);
			payload.serviceProvisionResponse.callbackReference.resourceURL = hubResourceURL;
			mc.setPayloadJSON(payload);
		"/>
	</class>
    <sequence key="com.wso2telco.dep.common.main.response.Sequence"/>
</sequence>
